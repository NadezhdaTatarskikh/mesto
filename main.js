(()=>{"use strict";var __webpack_modules__={857:()=>{eval('\n;// CONCATENATED MODULE: ./src/scripts/utils/constsnts.js\n\n\n// Конф. валидации\nvar config = {\n  formSelector: \'.popup__form\',\n  inputSelector: \'.popup__input\',\n  submitButtonSelector: \'.popup__button\',\n  inactiveButtonClass: \'popup__button_disabled\',\n  inputErrorClass: \'popup__input_error\',\n  errorClass: \'popup__error-text_active\'\n};\nvar profileName = document.querySelector(\'.profile__name\');\nvar profileJob = document.querySelector(\'.profile__job\');\nvar buttonOpenPopupProfile = document.querySelector(\'.profile__edit\');\nvar buttonOpenPopupCard = document.querySelector(\'.profile__add-button\');\nvar elementList = \'.photo-grid\';\nvar popupImage = document.querySelector(\'.popup_name_image\');\nvar popupImageImage = document.querySelector(\'.popup__image\');\nvar popupImageTitle = document.querySelector(\'.popup__image-title\');\nvar popupProfile = document.querySelector(\'.popup_name_profile\');\nvar formProfileElement = document.querySelector(\'.popup__form_name_profile\');\nvar profileNameInput = document.querySelector(\'.popup__input_text_name\');\nvar profileJobInput = document.querySelector(\'.popup__input_text_job\');\nvar popupCard = document.querySelector(\'.popup_name_photo\');\nvar cardAddForm = document.querySelector(\'.popup__form_name_photo\');\nvar cardInputName = document.querySelector(\'.popup__input_text_title\');\nvar cardInputLink = document.querySelector(\'.popup__input_text_link\');\n\n//попап редактирования аватара\nvar popupAvatar = document.querySelector(\'.popup_edit-avatar\');\nvar formEditAvatar = popupAvatar.querySelector(\'.popup__form\');\nvar buttonOpenPopupAvatar = document.querySelector(\'.profile__btn-avatar\');\nvar avatar = document.querySelector(\'.profile__avatar\');\n\n;// CONCATENATED MODULE: ./src/scripts/components/Card.js\n\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar Card = /*#__PURE__*/function () {\n  function Card(data, userId, handleCardClick, handleAddLike, handleLikeDelite, templateSelector) {\n    _classCallCheck(this, Card);\n    this.name = data.name;\n    this.link = data.link;\n    this._handleCardClick = handleCardClick;\n    this._id = data._id;\n    this._userId = userId;\n    this._likes = data.likes;\n    this._handleAddLike = handleAddLike;\n    this._handleLikeDelite = handleLikeDelite;\n    this._owner = data.owner._id;\n    this._templateSelector = templateSelector;\n  }\n\n  //копируем разметку\n  _createClass(Card, [{\n    key: "_getTemplate",\n    value: function _getTemplate() {\n      var cardElement = document.querySelector(this._templateSelector).content.querySelector(\'.photo-grid__item\').cloneNode(true);\n      return cardElement; //вернёт клонированный элемент\n    }\n\n    // метод лайк карточки, изменение количества лайков\n  }, {\n    key: "_handleCardLike",\n    value: function _handleCardLike(data) {\n      this._likeCard.classList.toggle(\'photo-grid__button_active\');\n      this._likeNumber.textContent = this._likes.length;\n    }\n  }, {\n    key: "_handleCardDelete",\n    value:\n    //метод удаления карточки\n    function _handleCardDelete() {\n      this._element.remove();\n      this._element = null;\n    }\n  }, {\n    key: "_checkLiked",\n    value:\n    //метод ставим или убираем лайк\n    function _checkLiked() {\n      if (this._likeCard.classList.constains(\'photo-grid__button_active\')) {\n        this._handleLikeDelite(this._id);\n      } else {\n        this.handleAddLike(this._id);\n      }\n    }\n\n    //метод проверяем пользователя карточки и убираем кнопку "удалить"\n  }, {\n    key: "_checkDeleteCard",\n    value: function _checkDeleteCard() {\n      if (this._owner !== this._userId) {\n        this._deleteCard.remove();\n      }\n    }\n\n    //метод проверяем "лайк" пользователя\n  }, {\n    key: "_isCardLiked",\n    value: function _isCardLiked() {\n      var _this = this;\n      if (this._likes.some(function (user) {\n        return _this._userId === user._id;\n      })) {\n        this._likeCard.classList.add(\'photo-grid__button_active\');\n      }\n    }\n\n    //метод добавления всех обработчиков\n  }, {\n    key: "_setEventListeners",\n    value: function _setEventListeners() {\n      var _this2 = this;\n      //клик по лайку\n      this._likeCard.addEventListener("click", function () {\n        return _this2._handleCardLike();\n      });\n      //клик на мусорке\n      this._deliteCard.addEventListener(\'click\', function () {\n        return _this2._handleCardDelete();\n      });\n      //клик по карточке\n      this._cardImage.addEventListener(\'click\', function () {\n        _this2._handleCardClick(_this2._name, _this2._link);\n        ;\n      });\n    }\n\n    //метод создания карточки\n  }, {\n    key: "generateCard",\n    value: function generateCard() {\n      this._element = this._getTemplate();\n      this._likeCard = this._element.querySelector(\'.photo-grid__button\');\n      this._deliteCard = this._element.querySelector(\'.photo-grid__delete\');\n      this._cardImage = this._element.querySelector(\'.photo-grid__image\');\n      this._cardName = this._element.querySelector(\'.photo-grid__text\');\n      this._likeNumber = this._element.querySelector(\'.photo-grid__like\');\n      //присваиваем значения\n      this._cardImage.alt = this.name;\n      this._cardImage.src = this.link;\n      this._cardName.textContent = this.name;\n      this._likesNumber.textContent = this._likes.length;\n      //навешиваем события\n      this._setEventListeners();\n      this._checkLiked();\n      this._isCardLiked();\n      //возвращаем готовую карточку\n      return this._element;\n    }\n  }]);\n  return Card;\n}();\n;// CONCATENATED MODULE: ./src/scripts/components/FormValidator.js\n\n\nfunction FormValidator_typeof(obj) { "@babel/helpers - typeof"; return FormValidator_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, FormValidator_typeof(obj); }\nfunction FormValidator_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction FormValidator_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, FormValidator_toPropertyKey(descriptor.key), descriptor); } }\nfunction FormValidator_createClass(Constructor, protoProps, staticProps) { if (protoProps) FormValidator_defineProperties(Constructor.prototype, protoProps); if (staticProps) FormValidator_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _defineProperty(obj, key, value) { key = FormValidator_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction FormValidator_toPropertyKey(arg) { var key = FormValidator_toPrimitive(arg, "string"); return FormValidator_typeof(key) === "symbol" ? key : String(key); }\nfunction FormValidator_toPrimitive(input, hint) { if (FormValidator_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (FormValidator_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar FormValidator = /*#__PURE__*/function () {\n  function FormValidator(config, formElement) {\n    var _this = this;\n    FormValidator_classCallCheck(this, FormValidator);\n    // Функция, которая добавляет класс с ошибкой\n    _defineProperty(this, "_showInputError", function (inputElement, errorMessage) {\n      var formError = _this._formElement.querySelector(".".concat(inputElement.id, "-error"));\n      inputElement.classList.add(_this._config.inputErrorClass);\n      formError.textContent = errorMessage;\n      formError.classList.add(_this._errorClass);\n    });\n    // Функция, которая удаляет класс с ошибкой\n    _defineProperty(this, "_hideInputError", function (inputElement) {\n      var formError = _this._formElement.querySelector(".".concat(inputElement.id, "-error"));\n      //убираем подчеркивание красным\n      inputElement.classList.remove(_this._config.inputErrorClass);\n      //удаляем текст ошибки\n      formError.classList.remove(_this._config.errorClass);\n      // Очищаем ошибку\n      formError.textContent = \'\';\n    });\n    // Функция, которая проверяет валидность форм\n    _defineProperty(this, "_isValid", function (inputElement) {\n      if (!inputElement.validity.valid) {\n        // Если поле не прошло валидацию, то показываем ошибку\n        _this._showInputError(inputElement, inputElement.validationMessage);\n      } else {\n        // Если проходит валидацию, то скрываем ошибку\n        _this._hideInputError(inputElement);\n      }\n    });\n    this._config = config;\n    this._formElement = formElement;\n    this._inputList = Array.from(this._formElement.querySelectorAll(this._config.inputSelector)); //найдем элементы DOM 1 раз тут и сделаем их полями класса\n    this._buttonElement = this._formElement.querySelector(this._config.submitButtonSelector);\n    this._submitButton = config.submitButtonSelector;\n    this._inactiveButtonClass = config.inactiveButtonClass;\n    this._inputErrorClass = config.inputErrorClass;\n    this._errorClass = config.errorClass;\n  }\n  FormValidator_createClass(FormValidator, [{\n    key: "_hasInvalidInput",\n    value:\n    // Проверка на наличие невалидных инпутов\n    function _hasInvalidInput() {\n      return this._inputList.some(function (inputElement) {\n        return !inputElement.validity.valid;\n      });\n    }\n  }, {\n    key: "resetValidation",\n    value: function resetValidation() {\n      var _this2 = this;\n      this._toggleButtonState();\n      this._inputList.forEach(function (inputElement) {\n        _this2._hideInputError(inputElement);\n      });\n    }\n\n    // Вызываем функцию toggleButtonState - добавляем/убираем активацию кнопки\n  }, {\n    key: "_toggleButtonState",\n    value: function _toggleButtonState() {\n      if (this._hasInvalidInput()) {\n        this._buttonElement.classList.add(this._config.inactiveButtonClass);\n        this._buttonElement.setAttribute(\'disabled\', true);\n      } else {\n        this._buttonElement.classList.remove(this._config.inactiveButtonClass);\n        this._buttonElement.removeAttribute(\'disabled\');\n      }\n    }\n  }, {\n    key: "_setEventListeners",\n    value:\n    // Функция setEventListeners\n    function _setEventListeners() {\n      var _this3 = this;\n      // проверяем состояние кнопки в самом начале\n      this._toggleButtonState();\n      this._inputList.forEach(function (inputElement) {\n        // валидируем при изменении полей\n        inputElement.addEventListener(\'input\', function () {\n          _this3._isValid(inputElement);\n          _this3._toggleButtonState();\n        });\n      });\n    }\n  }, {\n    key: "enableValidation",\n    value:\n    //функция навершивает слушатели для валидации форму\n    function enableValidation() {\n      this._setEventListeners();\n    }\n  }]);\n  return FormValidator;\n}();\n;// CONCATENATED MODULE: ./src/scripts/components/Popup.js\n\n\nfunction Popup_typeof(obj) { "@babel/helpers - typeof"; return Popup_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Popup_typeof(obj); }\nfunction Popup_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Popup_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Popup_toPropertyKey(descriptor.key), descriptor); } }\nfunction Popup_createClass(Constructor, protoProps, staticProps) { if (protoProps) Popup_defineProperties(Constructor.prototype, protoProps); if (staticProps) Popup_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Popup_defineProperty(obj, key, value) { key = Popup_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction Popup_toPropertyKey(arg) { var key = Popup_toPrimitive(arg, "string"); return Popup_typeof(key) === "symbol" ? key : String(key); }\nfunction Popup_toPrimitive(input, hint) { if (Popup_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Popup_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar Popup = /*#__PURE__*/function () {\n  function Popup(popupSelector) {\n    var _this = this;\n    Popup_classCallCheck(this, Popup);\n    // содержит логику закрытия попапа клавишей Esc\n    Popup_defineProperty(this, "_handleEscClose", function (event) {\n      if (event.key == \'Escape\') {\n        _this.close();\n      }\n    });\n    this._popup = document.querySelector(popupSelector);\n    this._buttonClosePopup = this._popup.querySelector(\'.popup__close-button\');\n    this._handleEscClose = this._handleEscClose.bind(this);\n  }\n\n  // открытие попапа\n  Popup_createClass(Popup, [{\n    key: "open",\n    value: function open() {\n      this._popup.classList.add(\'popup_opened\');\n      document.addEventListener(\'keydown\', this._handleEscClose);\n    }\n\n    // открытие и закрытие попапа\n  }, {\n    key: "close",\n    value: function close() {\n      this._popup.classList.remove(\'popup_opened\');\n      document.removeEventListener(\'keydown\', this._handleEscClose);\n    }\n  }, {\n    key: "setEventListeners",\n    value:\n    // функция закрытия попапа на крестик и на оверлей\n    function setEventListeners() {\n      var _this2 = this;\n      this._popup.addEventListener(\'mousedown\', function (evt) {\n        if (evt.target.classList.contains(\'popup\') || evt.target.classList.contains(\'popup__close-button\')) {\n          _this2.close();\n        }\n      });\n    }\n  }]);\n  return Popup;\n}();\n\n;// CONCATENATED MODULE: ./src/scripts/components/PopupWithImage.js\n\n\nfunction PopupWithImage_typeof(obj) { "@babel/helpers - typeof"; return PopupWithImage_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, PopupWithImage_typeof(obj); }\nfunction PopupWithImage_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction PopupWithImage_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, PopupWithImage_toPropertyKey(descriptor.key), descriptor); } }\nfunction PopupWithImage_createClass(Constructor, protoProps, staticProps) { if (protoProps) PopupWithImage_defineProperties(Constructor.prototype, protoProps); if (staticProps) PopupWithImage_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction PopupWithImage_toPropertyKey(arg) { var key = PopupWithImage_toPrimitive(arg, "string"); return PopupWithImage_typeof(key) === "symbol" ? key : String(key); }\nfunction PopupWithImage_toPrimitive(input, hint) { if (PopupWithImage_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (PopupWithImage_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (PopupWithImage_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar PopupWithImage = /*#__PURE__*/function (_Popup) {\n  _inherits(PopupWithImage, _Popup);\n  var _super = _createSuper(PopupWithImage);\n  function PopupWithImage(popupSelector) {\n    var _this;\n    PopupWithImage_classCallCheck(this, PopupWithImage);\n    _this = _super.call(this, popupSelector);\n    _this._title = _this._popup.querySelector(\'.popup__image-title\');\n    _this._image = _this._popup.querySelector(\'.popup__image\');\n    return _this;\n  }\n  PopupWithImage_createClass(PopupWithImage, [{\n    key: "open",\n    value: function open(data) {\n      this._image.src = data.link;\n      this._title.textContent = data.name;\n      this._image.alt = data.name;\n      _get(_getPrototypeOf(PopupWithImage.prototype), "open", this).call(this);\n    }\n  }]);\n  return PopupWithImage;\n}(Popup);\n;// CONCATENATED MODULE: ./src/scripts/components/PopupWithForm.js\n\n\nfunction PopupWithForm_typeof(obj) { "@babel/helpers - typeof"; return PopupWithForm_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, PopupWithForm_typeof(obj); }\nfunction PopupWithForm_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction PopupWithForm_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, PopupWithForm_toPropertyKey(descriptor.key), descriptor); } }\nfunction PopupWithForm_createClass(Constructor, protoProps, staticProps) { if (protoProps) PopupWithForm_defineProperties(Constructor.prototype, protoProps); if (staticProps) PopupWithForm_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction PopupWithForm_toPropertyKey(arg) { var key = PopupWithForm_toPrimitive(arg, "string"); return PopupWithForm_typeof(key) === "symbol" ? key : String(key); }\nfunction PopupWithForm_toPrimitive(input, hint) { if (PopupWithForm_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (PopupWithForm_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction PopupWithForm_get() { if (typeof Reflect !== "undefined" && Reflect.get) { PopupWithForm_get = Reflect.get.bind(); } else { PopupWithForm_get = function _get(target, property, receiver) { var base = PopupWithForm_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return PopupWithForm_get.apply(this, arguments); }\nfunction PopupWithForm_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = PopupWithForm_getPrototypeOf(object); if (object === null) break; } return object; }\nfunction PopupWithForm_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) PopupWithForm_setPrototypeOf(subClass, superClass); }\nfunction PopupWithForm_setPrototypeOf(o, p) { PopupWithForm_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return PopupWithForm_setPrototypeOf(o, p); }\nfunction PopupWithForm_createSuper(Derived) { var hasNativeReflectConstruct = PopupWithForm_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = PopupWithForm_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = PopupWithForm_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return PopupWithForm_possibleConstructorReturn(this, result); }; }\nfunction PopupWithForm_possibleConstructorReturn(self, call) { if (call && (PopupWithForm_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return PopupWithForm_assertThisInitialized(self); }\nfunction PopupWithForm_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction PopupWithForm_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction PopupWithForm_getPrototypeOf(o) { PopupWithForm_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return PopupWithForm_getPrototypeOf(o); }\n\nvar PopupWithForm = /*#__PURE__*/function (_Popup) {\n  PopupWithForm_inherits(PopupWithForm, _Popup);\n  var _super = PopupWithForm_createSuper(PopupWithForm);\n  function PopupWithForm(_ref) {\n    var _this;\n    var popupSelector = _ref.popupSelector,\n      handleSubmitForm = _ref.handleSubmitForm;\n    PopupWithForm_classCallCheck(this, PopupWithForm);\n    _this = _super.call(this, popupSelector);\n    _this._handleSubmitForm = handleSubmitForm;\n    _this._form = _this._popup.querySelector(\'.popup__form\');\n    _this._submitButton = _this._popup.querySelector(\'.popup__button\');\n    _this._inputElements = _this._popup.querySelectorAll(\'.popup__input\');\n    return _this;\n  }\n  // собирает данные всех полей формы.\n  PopupWithForm_createClass(PopupWithForm, [{\n    key: "_getInputValues",\n    value: function _getInputValues() {\n      var _this2 = this;\n      // создаём пустой объект\n      this._formValues = {};\n      // добавляем в этот объект значения всех полей\n      this._inputElements.forEach(function (input) {\n        _this2._formValues[input.name] = input.value;\n      });\n      // возвращаем объект значений\n      return this._formValues;\n    }\n\n    // функция, параметром которой, является колбэк на удаление карточки\n  }, {\n    key: "setEventListeners",\n    value: function setEventListeners() {\n      var _this3 = this;\n      PopupWithForm_get(PopupWithForm_getPrototypeOf(PopupWithForm.prototype), "setEventListeners", this).call(this);\n      this._form.addEventListener(\'submit\', function (evt) {\n        evt.preventDefault();\n        // добавим вызов функции _handleFormSubmit, передадим ей объект — результат работы _getInputValues\n        _this3._handleSubmitForm(_this3._getInputValues());\n      });\n    }\n  }, {\n    key: "close",\n    value: function close() {\n      PopupWithForm_get(PopupWithForm_getPrototypeOf(PopupWithForm.prototype), "close", this).call(this);\n      this._form.reset();\n    }\n    //отображаем, что идет загрузка\n  }, {\n    key: "loading",\n    value: function loading(isLoading) {\n      if (isLoading) {\n        this._submitButton.textContent = \'Сохранение...\';\n      } else {\n        this._submitButton.textContent = \'Сохранить\';\n      }\n    }\n  }]);\n  return PopupWithForm;\n}(Popup);\n;// CONCATENATED MODULE: ./src/scripts/components/Section.js\n\n\n// создаём класс, который отвечает за отрисовку элементов на странице\nfunction Section_typeof(obj) { "@babel/helpers - typeof"; return Section_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Section_typeof(obj); }\nfunction Section_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Section_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Section_toPropertyKey(descriptor.key), descriptor); } }\nfunction Section_createClass(Constructor, protoProps, staticProps) { if (protoProps) Section_defineProperties(Constructor.prototype, protoProps); if (staticProps) Section_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Section_toPropertyKey(arg) { var key = Section_toPrimitive(arg, "string"); return Section_typeof(key) === "symbol" ? key : String(key); }\nfunction Section_toPrimitive(input, hint) { if (Section_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Section_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar Section = /*#__PURE__*/function () {\n  function Section(_ref, containerSelector) {\n    var items = _ref.items,\n      renderer = _ref.renderer;\n    Section_classCallCheck(this, Section);\n    this._renderedItems = items;\n    this._renderer = renderer;\n    this._container = document.querySelector(containerSelector);\n  }\n\n  // метод, который отвечает за создание и отрисовку данных на странице\n  Section_createClass(Section, [{\n    key: "renderItems",\n    value: function renderItems() {\n      var _this = this;\n      this._renderedItems.forEach(function (item) {\n        _this._renderer(item);\n      });\n    }\n\n    // принимает DOM-элемент и добавляет его в контейнер\n  }, {\n    key: "addItem",\n    value: function addItem(element) {\n      this._container.prepend(element);\n    }\n  }, {\n    key: "addCardAppend",\n    value: function addCardAppend(element) {\n      this._container.append(element);\n    }\n  }]);\n  return Section;\n}();\n;// CONCATENATED MODULE: ./src/scripts/components/UserInfo.js\n\n\nfunction UserInfo_typeof(obj) { "@babel/helpers - typeof"; return UserInfo_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, UserInfo_typeof(obj); }\nfunction UserInfo_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction UserInfo_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UserInfo_toPropertyKey(descriptor.key), descriptor); } }\nfunction UserInfo_createClass(Constructor, protoProps, staticProps) { if (protoProps) UserInfo_defineProperties(Constructor.prototype, protoProps); if (staticProps) UserInfo_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction UserInfo_toPropertyKey(arg) { var key = UserInfo_toPrimitive(arg, "string"); return UserInfo_typeof(key) === "symbol" ? key : String(key); }\nfunction UserInfo_toPrimitive(input, hint) { if (UserInfo_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (UserInfo_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar UserInfo = /*#__PURE__*/function () {\n  function UserInfo(_ref) {\n    var userName = _ref.userName,\n      userJob = _ref.userJob,\n      avatar = _ref.avatar;\n    UserInfo_classCallCheck(this, UserInfo);\n    this._userName = document.querySelector(userName);\n    this._userJob = document.querySelector(userJob);\n    this._avatar = document.querySelector(avatar);\n  }\n  //публичный метод возвращает объект с данными пользователя\n  UserInfo_createClass(UserInfo, [{\n    key: "getUserInfo",\n    value: function getUserInfo() {\n      var userInfo = {\n        userName: this._userName.textContent,\n        userJob: this._userJob.textContent,\n        avatar: this._avatar.src\n      };\n      return userInfo;\n    }\n    //публичный метод, принимает новые данные пользователя и добавляет их на страницу\n  }, {\n    key: "setUserInfo",\n    value: function setUserInfo(data) {\n      this._userName.textContent = datа.name;\n      this._userJob.textContent = datа.job;\n      this._avatar.src = data.avatar;\n    }\n  }]);\n  return UserInfo;\n}();\n;// CONCATENATED MODULE: ./src/scripts/components/PopupWithSubmit.js\n\n\nfunction PopupWithSubmit_typeof(obj) { "@babel/helpers - typeof"; return PopupWithSubmit_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, PopupWithSubmit_typeof(obj); }\nfunction PopupWithSubmit_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction PopupWithSubmit_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, PopupWithSubmit_toPropertyKey(descriptor.key), descriptor); } }\nfunction PopupWithSubmit_createClass(Constructor, protoProps, staticProps) { if (protoProps) PopupWithSubmit_defineProperties(Constructor.prototype, protoProps); if (staticProps) PopupWithSubmit_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction PopupWithSubmit_toPropertyKey(arg) { var key = PopupWithSubmit_toPrimitive(arg, "string"); return PopupWithSubmit_typeof(key) === "symbol" ? key : String(key); }\nfunction PopupWithSubmit_toPrimitive(input, hint) { if (PopupWithSubmit_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (PopupWithSubmit_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction PopupWithSubmit_get() { if (typeof Reflect !== "undefined" && Reflect.get) { PopupWithSubmit_get = Reflect.get.bind(); } else { PopupWithSubmit_get = function _get(target, property, receiver) { var base = PopupWithSubmit_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return PopupWithSubmit_get.apply(this, arguments); }\nfunction PopupWithSubmit_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = PopupWithSubmit_getPrototypeOf(object); if (object === null) break; } return object; }\nfunction PopupWithSubmit_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) PopupWithSubmit_setPrototypeOf(subClass, superClass); }\nfunction PopupWithSubmit_setPrototypeOf(o, p) { PopupWithSubmit_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return PopupWithSubmit_setPrototypeOf(o, p); }\nfunction PopupWithSubmit_createSuper(Derived) { var hasNativeReflectConstruct = PopupWithSubmit_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = PopupWithSubmit_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = PopupWithSubmit_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return PopupWithSubmit_possibleConstructorReturn(this, result); }; }\nfunction PopupWithSubmit_possibleConstructorReturn(self, call) { if (call && (PopupWithSubmit_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return PopupWithSubmit_assertThisInitialized(self); }\nfunction PopupWithSubmit_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction PopupWithSubmit_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction PopupWithSubmit_getPrototypeOf(o) { PopupWithSubmit_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return PopupWithSubmit_getPrototypeOf(o); }\n\nvar PopupWithSubmit = /*#__PURE__*/function (_Popup) {\n  PopupWithSubmit_inherits(PopupWithSubmit, _Popup);\n  var _super = PopupWithSubmit_createSuper(PopupWithSubmit);\n  function PopupWithSubmit(popupSelector) {\n    var _this;\n    PopupWithSubmit_classCallCheck(this, PopupWithSubmit);\n    _this = _super.call(this, popupSelector);\n    _this._form = _this._popup.querySelector(\'.popup__form\');\n    return _this;\n  }\n\n  // функция, параметром которой, является колбэк на удаление карточки\n  PopupWithSubmit_createClass(PopupWithSubmit, [{\n    key: "setSubmitForm",\n    value: function setSubmitForm(action) {\n      this._handleSubmit = action;\n    }\n  }, {\n    key: "setEventListeners",\n    value: function setEventListeners() {\n      var _this2 = this;\n      PopupWithSubmit_get(PopupWithSubmit_getPrototypeOf(PopupWithSubmit.prototype), "setEventListeners", this).call(this);\n      this._form.addEventListener(\'submit\', function (evt) {\n        evt.preventDefault();\n        // добавим вызов функции _handleFormSubmit\n        _this2._handleSubmit();\n      });\n    }\n  }]);\n  return PopupWithSubmit;\n}(Popup);\n;// CONCATENATED MODULE: ./src/scripts/components/Api.js\n\n\nfunction Api_typeof(obj) { "@babel/helpers - typeof"; return Api_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Api_typeof(obj); }\nfunction Api_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Api_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Api_toPropertyKey(descriptor.key), descriptor); } }\nfunction Api_createClass(Constructor, protoProps, staticProps) { if (protoProps) Api_defineProperties(Constructor.prototype, protoProps); if (staticProps) Api_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Api_toPropertyKey(arg) { var key = Api_toPrimitive(arg, "string"); return Api_typeof(key) === "symbol" ? key : String(key); }\nfunction Api_toPrimitive(input, hint) { if (Api_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Api_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar Api = /*#__PURE__*/function () {\n  function Api(options) {\n    Api_classCallCheck(this, Api);\n    this._url = options.url;\n    this._headers = options.headers;\n  }\n\n  //проверяем ответ с сервера\n  Api_createClass(Api, [{\n    key: "_checkResponse",\n    value: function _checkResponse(res) {\n      {\n        if (res.ok) {\n          return res.json();\n        }\n        // если ошибка, отклоняем промис\n        return Promise.reject("\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: ".concat(res.status));\n      }\n    }\n\n    // Получаем карточеки с сервера\n  }, {\n    key: "getInitialCards",\n    value: function getInitialCards() {\n      return fetch("".concat(this._url, "/cards"), {\n        headers: this._headers\n      }).then(this._checkResponse);\n    }\n\n    // Добавим новую карточку\n  }, {\n    key: "newCardElement",\n    value: function newCardElement(data) {\n      return fetch("".concat(this._url, "/cards"), {\n        method: \'POST\',\n        headers: this._headers,\n        body: JSON.stringify({\n          name: data.name,\n          link: data.link\n        })\n      }).then(this._checkResponse);\n    }\n\n    // Удаление карточки\n  }, {\n    key: "delitCard",\n    value: function delitCard(_id) {\n      return fetch("".concat(this._url, "/cards/").concat(_id), {\n        method: \'DELETE\',\n        headers: this._headers\n      }).then(this._checkResponse);\n    }\n\n    // Получаем информацию о пользователе с сервера\n  }, {\n    key: "getUserInfo",\n    value: function getUserInfo() {\n      return fetch("".concat(this._url, "/users/me"), {\n        headers: this._headers\n      }).then(this._checkResponse);\n    }\n\n    // Обновляем информацию о пользователе с сервера\n  }, {\n    key: "editUserInfo",\n    value: function editUserInfo(data) {\n      return fetch("".concat(this._url, "/users/me"), {\n        method: \'PATCH\',\n        headers: this._headers,\n        body: JSON.stringify({\n          name: data.name,\n          job: data.job\n        })\n      }).then(this._checkResponse);\n    }\n    // Редактирование аватара пользователя\n  }, {\n    key: "editAvatar",\n    value: function editAvatar(data) {\n      return fetch("".concat(this._url, "/users/me/avatar"), {\n        method: \'PATCH\',\n        headers: this._headers,\n        body: JSON.stringify({\n          avatar: data.avatar\n        })\n      }).then(this._checkResponse);\n    }\n    // Ставим лайк карточке\n  }, {\n    key: "setLikeCard",\n    value: function setLikeCard(_id) {\n      return fetch("".concat(this._url, "/cards/").concat(_id, "/likes"), {\n        method: \'PUT\',\n        headers: this._headers\n      }).then(this._checkResponse);\n    }\n\n    // Удаляем лайк\n  }, {\n    key: "delitLike",\n    value: function delitLike(_id) {\n      return fetch("".concat(this._url, "/cards/").concat(_id, "/likes"), {\n        method: \'DELETE\',\n        headers: this._headers\n      }).then(this._checkResponse);\n    }\n  }]);\n  return Api;\n}();\n;// CONCATENATED MODULE: ./src/pages/index.js\n\n\n// импорт главного файла стилей\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\n\n// api\nvar api = new Api({\n  url: \'https://mesto.nomoreparties.co/v1/cohort-61\',\n  headers: {\n    authorization: \'b5e191e2-a9f1-4b65-96ec-0b7ea96da54a\',\n    \'Content-Type\': \'application/json\'\n  }\n});\n\n// Загрузка готовых карточек и данных о пользователе с сервера\nPromise.all([api.getInitialCards(), api.getUserInfo()]).then(function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n    initialCards = _ref2[0],\n    userData = _ref2[1];\n  userInfo.setUserInfo(userData);\n  cardsList.renderItems(initialCards);\n}).catch(function (err) {\n  console.log("\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: ".concat(err));\n});\n\n// попап просмотра изображения\nvar popupWithImage = new PopupWithImage(\'.popup_name_image\');\npopupWithImage.setEventListeners();\n\n// попап удаления карточки\nvar popupWithSubmit = new PopupWithSubmit(\'.popup_delete-card\');\npopupWithSubmit.setEventListeners();\n\n//экземпляр UserInfo с селекторами профиля\nvar userInfo = new UserInfo({\n  userName: \'.profile__name\',\n  userJob: \'.profile__job\',\n  avatar: \'.profile__avatar\'\n});\n\n//функция, которая заносит информацию в инпуты профиля\nfunction addUserInfoForm(_ref3) {\n  var userName = _ref3.userName,\n    userJob = _ref3.userJob;\n  //Получаем значение полей jobInput и nameInput из свойства value\n  profileNameInput.value = userName;\n  profileJobInput.value = userJob;\n}\n;\n\n//функция открытия попапа профиля и занесения  информации в инпуты\nbuttonOpenPopupProfile.addEventListener(\'click\', function () {\n  var info = userInfo.getUserInfo();\n  addUserInfoForm({\n    userName: info.userName,\n    userJob: info.userJob\n  });\n  editProfilePopup.open();\n});\n\n// попап редактирования профиля\nvar editProfilePopup = new PopupWithForm({\n  popupSelector: \'.popup_name_profile\',\n  handleSubmitForm: function handleSubmitForm(dataForm) {\n    editProfilePopup.loading(true);\n    api.editUserInfo(dataForm).then(function (dataForm) {\n      userInfo.setUserInfo(data);\n      editProfilePopup.close();\n    }).catch(function (err) {\n      console.log("\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: ".concat(err));\n    }).finally(function () {\n      editProfilePopup.loading(false);\n    });\n  }\n});\neditProfilePopup.setEventListeners();\n\n//создание попапа редактирования аватара\nvar editAvatarPopup = new PopupWithForm({\n  popupSelector: \'.popup_edit-avatar\',\n  handleSubmitForm: function handleSubmitForm(data) {\n    editAvatarPopup.loading(true);\n    api.editAvatar(data).then(function (data) {\n      avatar.src = data.avatar;\n      editAvatarPopup.close();\n    }).catch(function (err) {\n      console.log("\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: ".concat(err));\n    }).finally(function () {\n      editAvatarPopup.loading(false);\n    });\n  }\n});\neditAvatarPopup.setEventListeners();\n\n//функция открытия попапа редактирования аватара\nbuttonOpenPopupAvatar.addEventListener(\'click\', function () {\n  editAvatarPopup.open();\n});\n\n// Создаем новую карточку\nvar createCard = function createCard(data) {\n  var card = new Card({\n    data: data,\n    userId: userId,\n    handleCardClick: function handleCardClick(name, link) {\n      popupWithImage.open(name, link);\n    },\n    handleCardDelete: function handleCardDelete() {\n      popupWithSubmit.open();\n      popupWithSubmit.setSubmitForm(function () {\n        api.deleteCard(card.getId()).then(function () {\n          card.deleteCard();\n          popupWithSubmit.close();\n        }).catch(function (err) {\n          console.log("\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: ".concat(err));\n        });\n      });\n    },\n    handleAddLike: function handleAddLike() {\n      api.setLikeCard(card.getId()).then(function (data) {\n        card.handleCardLike(data);\n      }).catch(function (err) {\n        console.log("\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: ".concat(err));\n      });\n    },\n    handleCardLike: function handleCardLike() {\n      api.deleteLike(card.getId()).then(function (data) {\n        card.handleCardLike(data);\n      }).catch(function (err) {\n        console.log("\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: ".concat(err));\n      });\n    }\n  }, \'.template\');\n  return card.generateCard();\n};\n\n// Создание экземпляра класса Section\nvar cardsList = new Section({\n  renderer: function renderer(item) {\n    cardsList.addCardAppend(createCard(item));\n  }\n}, \'.photo-grid\');\n\n// Добавляем новую карточку\nvar editCardPopup = new PopupWithForm({\n  popupSelector: \'.popup_name_photo\',\n  handleSubmitForm: function handleSubmitForm(data) {\n    editCardPopup.loading(true);\n    api.newCardElement(data).then(function (data) {\n      cardsList.addItem(createCard(data));\n      editCardPopup.close();\n    }).catch(function (err) {\n      console.log("\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: ".concat(err));\n    }).finally(function () {\n      editCardPopup.loading(false);\n    });\n  }\n});\neditCardPopup.setEventListeners();\n\n// слушатель кнопки открытия попапа добавления новой карточки\nbuttonOpenPopupCard.addEventListener(\'click\', function () {\n  cardAddFormValidate.resetValidation();\n  editCardPopup.open();\n});\n\n// валидация формы редактирования профиля\nvar formProfileElementValidate = new FormValidator(config, formProfileElement);\nformProfileElementValidate.enableValidation();\n\n// валидация формы добавления новой карточки\nvar cardAddFormValidate = new FormValidator(config, cardAddForm);\ncardAddFormValidate.enableValidation();\n\n// валидация формы редактирования аватара\nvar formEditAvatarValidate = new FormValidator(config, formEditAvatar);\nformEditAvatarValidate.enableValidation();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///857\n')}},__webpack_exports__={};__webpack_modules__[857]()})();